openapi: 3.0.0
servers: []
paths:
  /pet:
    summary: "summary"
    description: "description"
    post:
      tags:
        - pet
      summary: "Add a new pet to the store"
      description: ""
      operationId: addPet
      parameters:
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
          - "write:pets"
          - "read:pets"
      requestBody:
        "$ref": "#/components/requestBodies/requestBody1"
      externalDocs:
    put:
      tags:
      - pet
      summary: "Update an existing pet"
      description: ""
      operationId: updatePet
      parameters:
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
        security:
          - petstore_auth:
            - "write:pets"
            - "read:pets"
        requestBody:
          "$ref": "#/components/requestBodies/requestBody1"
components:
  schemas:
    Order:
      type: object
      not:
        type: integer
        format: int32
      additionalProperties:
        type: integer
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          "$ref": "#/components/schemas/Category"
        user:
          type: string
          example: doggie
          "$ref": "http://localhost:${dynamicPort}/remote/schema#/components/schemas/User"
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            "$ref": "http://localhost:${dynamicPort}/remote/schema#/components/schemas/ExampleSchema"
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      required:
      - name
      - photoUrls
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  parameters:
    contentParameter:
      in: query
      name: coordinates
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedErrorModel'
      examples:
        cat:
          summary: An example of a cat
          value:
            name: Fluffy
            petType: Cat
            color: White
            gender: male
            breed: Persian
    refParam:
      "$ref": "#/components/parameters/limitParam"
    remoteParameter:
      "$ref": "http://localhost:${dynamicPort}/remote/parameter"
    newParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
        "$ref": "#/components/schemas/Tag"
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32