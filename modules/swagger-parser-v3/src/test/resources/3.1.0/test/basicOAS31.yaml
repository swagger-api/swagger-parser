openapi: "3.1.0"
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema
info:
  version: 1.0.0
  summary: test summary in info object
  description: description in info object
  title: Swagger Petstore
  license:
    name: MIT
    identifier: test identifier
servers:
  - url: http://petstore.swagger.io/v1
  - url: http://{host}.swagger.io/v1
    variables:
      host:
        default: demo
        description: this value is assigned by the service provider
        enum: []
webhooks:
  # Each webhook needs a name
  newPet:
    # This is a Path Item Object, the only difference is that the request is initiated by the API provider
    post:
      requestBody:
        description: Information about a new pet in the system
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
              description: pet
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                description: error
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
        - $ref: "#/components/parameters/User"
          description: user
          summary: user
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  pathItems:
    pets:
      get:
        description: Returns all pets from the system that the user has access to
        responses:
          '200':
            description: A list of pets.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/pet'
  parameters:
    User:
      in: query
      description: user
      name: user
      schema:
        type: string
  schemas:
    Pet:
      type:
        - object
        - string
        - array
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          writeOnly: true
          readOnly: true
        testenum:
          type: string
          enum:
            - available
            - pending
            - sold
          default: available
        testconst:
          type: string
          const: pending
        tag:
          type: string
      arbitraryKeyword: test
      $ref: ./ex.json#user-profile
    Pets:
      type: 'null'
      default: "I'm a string"
      exclusiveMaximum: 12
      exclusiveMinimum: 1
      items:
        $ref: "#/components/schemas/Pet"
    ArrayWithoutItems:
      type: array
    ItemsWithoutArrayType:
      type: object
      items:
        item1:
          type: object
        item2:
          type: string
        item3: what
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        tag:
          $ref: "#/components/schemas/Tag"
    Tag:
      type:
        - object
        - string
        - string
        - foo
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      patternProperties:
        '[a-b].*': 1
    MapAnyValue:
      additionalProperties: { }
